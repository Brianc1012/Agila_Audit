NOTE: "C:\capstone\audit\app\(pages)\audit\page.tsx" is the UI of this Audit Log microservice, which content is filtered based on JWT TOKEN AND APIKEY AS MENTIONED BELOW.

# ✅ AUDIT LOGS MICROSERVICE — FINAL BACKEND DEVELOPMENT PROMPT (AUTH PAYLOAD ALIGNED)

## 🎯 Context Summary
This **Audit Logs Microservice**:
- Is part of the integrated Bus Company Management Platform.  
- Receives and records actions from **Finance**, **HR**, **Inventory**, and **Operations** systems.  
- Serves as the **centralized audit trail repository**.  
- Already includes a **UI draft** — backend is the **main focus** here.  
  - UI modifications are only allowed if needed to align with backend routes or data structures.

---

## 🔐 Authentication & Access Source

### HR Auth Microservice provides JWT payload:
```ts
async validate(payload) {
  return { 
    id: payload.sub,          // user ID
    username: payload.username, // string
    role: payload.role         // "Finance Admin", "Finance Non-Admin", etc.
  };
}
```

- The **JWT** only identifies user credentials (no department).  
- The **department** (service name) is determined by the **API key** used when sending logs or requests.  
- This ensures consistent separation per department (Finance, HR, Inventory, Operations).

---

## 👥 Access Control Rules

| Role | Access Scope |
|------|---------------|
| **SuperAdmin** | Full access — can view all audit logs across all departments. |
| **Department Admin** (e.g., Finance Admin, HR Admin, etc.) | Can view logs belonging only to their department and all users under that department. |
| **Department Non-Admin** (e.g., Finance Secretary, HR Clerk) | Can view only their own audit log records. |
| **Other Departments** | Cannot view or query logs belonging to another department. |

Access filtering must be applied both in controller-level queries and middleware-level authorization.

---

## 🏗️ Project Structure
```
src/
├─ index.ts
├─ app.ts
├─ routes/
│   ├─ auditLogs.routes.ts
│   ├─ summaries.routes.ts
│   ├─ apiKeys.routes.ts
├─ controllers/
│   ├─ auditLogs.controller.ts
│   ├─ summaries.controller.ts
│   ├─ apiKeys.controller.ts
├─ services/
│   ├─ auditLogs.service.ts
│   ├─ summaries.service.ts
│   ├─ apiKeys.service.ts
├─ middlewares/
│   ├─ auth.middleware.ts        // JWT verify (id, username, role)
│   ├─ apiKey.middleware.ts      // API key validation + injects department
│   ├─ roleAccess.middleware.ts  // Enforce access rules based on role + department
│   ├─ rateLimit.middleware.ts
│   ├─ errorHandler.middleware.ts
├─ utils/
│   ├─ hash.util.ts
│   ├─ jwt.util.ts
│   ├─ response.util.ts
│   ├─ validation.util.ts
├─ prisma/
│   └─ client.ts
├─ scripts/
│   └─ seedApiKeys.ts
└─ types/
    └─ auditLog.d.ts
```

---

## 🌐 Core API Endpoints

### 1. `/api/audit-logs`
| Endpoint | Method | Description | Access Control |
|-----------|---------|-------------|----------------|
| `/api/audit-logs` | `POST` | Create new audit log from other microservices | Requires valid `x-api-key` |
| `/api/audit-logs` | `GET` | Fetch logs with filters (userId, service, action, date) | JWT required — role-based visibility enforced |
| `/api/audit-logs/:id` | `GET` | View single audit log entry | JWT required — role-based visibility enforced |
| `/api/audit-logs/:id` | `DELETE` | Soft delete (SuperAdmin only) | SuperAdmin only |

---

### 2. `/api/summaries`
| Endpoint | Method | Description | Access Control |
|-----------|---------|-------------|----------------|
| `/api/summaries` | `GET` | Get daily/weekly/monthly aggregate summaries | Department Admin → own department only; SuperAdmin → all |
| `/api/summaries/aggregate` | `POST` | Manual aggregation rebuild | SuperAdmin only |

---

### 3. `/api/keys`
| Endpoint | Method | Description | Access Control |
|-----------|---------|-------------|----------------|
| `/api/keys` | `GET` | List all registered API keys | SuperAdmin only |
| `/api/keys` | `POST` | Generate and hash new API key | SuperAdmin only |
| `/api/keys/:id/revoke` | `PATCH` | Revoke API key | SuperAdmin only |
| `/api/keys/validate` | `POST` | Validate API key (internal) | Microservice-only |

---

## ⚙️ Middleware Logic Summary

### `apiKey.middleware.ts`
- Reads `x-api-key` header.
- Validates via Prisma `ApiKey` table (`isActive = true`).
- Injects:
  ```ts
  req.serviceName = apiKey.serviceName; // "finance", "hr", "inventory", "operations"
  ```
- Used to determine department context.

### `auth.middleware.ts`
- Decodes JWT.
- Attaches `req.user = { id, username, role }`.
- Rejects requests without a valid JWT.

### `roleAccess.middleware.ts`
- Uses both `req.user.role` and `req.serviceName` to enforce:
  - Non-Admin → `where performedBy = req.user.id`
  - Admin → `where sourceService = req.serviceName`
  - SuperAdmin → unrestricted
- Common helper function: `applyAccessFilter(query, user, serviceName)`.

---

## 🧩 Service Responsibilities

### `auditLogs.service.ts`
- `createLog(data)` — insert new audit log (with `oldValues`, `newValues`, etc.)
- `getLogs(filters, user, serviceName)` — apply visibility filter based on user role.
- `getLogById(id, user, serviceName)` — fetch single record with restriction.
- `deleteLog(id)` — soft delete (SuperAdmin only).

### `summaries.service.ts`
- `aggregateDailyLogs()` — daily totals per action/service.
- `getSummaryByFilter(filters)` — support date ranges and source filtering.

### `apiKeys.service.ts`
- `createKey(serviceName)` — hash + save.
- `validateKey(rawKey)` — hash compare.
- `revokeKey(id)` — deactivate.
- `listKeys()` — admin-only.

---

## 🧾 Seeder: `scripts/seedApiKeys.ts`
Automatically insert default keys (SHA-256 hashed):

| Service | Key Name | Default Flags |
|----------|-----------|---------------|
| Finance | FINANCE_API_KEY | canWrite=true |
| HR | HR_API_KEY | canWrite=true |
| Inventory | INVENTORY_API_KEY | canWrite=true |
| Operations | OPERATIONS_API_KEY | canWrite=true |

---

## 🔐 Example Flow

**Finance Service → Audit Logs**
```http
POST /api/audit-logs
x-api-key: FINANCE_API_KEY
Content-Type: application/json

{
  "moduleName": "Trip Revenue Recording",
  "recordId": "REV-20251022-0001",
  "action": "CREATE",
  "performedBy": "emp101",
  "performedByName": "Maria Santos",
  "performedByRole": "Finance Admin",
  "oldValues": null,
  "newValues": "{\"amount\":500,\"tripId\":\"TRIP-001\",\"driver\":\"Juan\",\"date\":\"2025-10-22\"}"
}
```

- ✅ API key validates → assigns `sourceService = finance`.  
- ✅ JWT validates → identifies user `emp101`.  
- ✅ Log is stored with full record history.

---

## 🧠 Environment Variables
```bash
PORT=4003
HOST=localhost
BASE_URL=http://localhost:4003

AUDIT_LOGS_DATABASE_URL=postgresql://postgres:password@localhost:5432/audit_db?schema=public
SHADOW_DATABASE_URL=postgresql://postgres:password@localhost:5432/audit_db_shadow?schema=public

JWT_SECRET=supersecurejwtsecret
FINANCE_API_KEY=finance_default_key
HR_API_KEY=hr_default_key
INVENTORY_API_KEY=inventory_default_key
OPERATIONS_API_KEY=operations_default_key

PRISMA_LOG_LEVEL=info
NODE_ENV=development
SERVICE_NAME=audit-logs-microservice
```

---

## 🧠 Copilot Prompt Summary
> “This repository already includes a UI draft — focus primarily on developing the **backend** of the Audit Logs Microservice.  
> Use **TypeScript + Express + Prisma + PostgreSQL**.  
> Implement:  
> - Audit log creation and retrieval endpoints  
> - API key–based inter-service auth  
> - JWT-based user auth (payload: id, username, role)  
> - Department-scoped visibility rules derived from the API key’s service name  
> - SuperAdmin, Department Admin, and Non-Admin access logic as defined  
> - Seeder for default API keys.  
> Modify UI **only if required** to align backend and frontend data flow.”
````